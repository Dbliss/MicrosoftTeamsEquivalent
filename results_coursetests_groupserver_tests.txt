============================= test session starts ==============================
platform linux -- Python 3.9.2, pytest-6.2.2, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/import/kamen/3/cs1531/project-automarking/tempstore/.hypothesis/examples')
metadata: {'Python': '3.9.2', 'Platform': 'Linux-4.19.0-21-amd64-x86_64-with-glibc2.31', 'Packages': {'pytest': '6.2.2', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'jest': '0.3.0', 'hypothesis': '6.1.1', 'timeout': '1.4.2', 'snapshottest': '0.6.0', 'metadata': '2.0.1'}}
rootdir: /import/kamen/3/cs1531/project-automarking/tempstore
plugins: jest-0.3.0, hypothesis-6.1.1, timeout-1.4.2, snapshottest-0.6.0, metadata-2.0.1
collecting ... collected 367 items

httpTests/authTests/test_auth_login.py::testSuccessfulLogin PASSED       [  5%]
httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions PASSED    [  5%]
httpTests/authTests/test_auth_login.py::testUnregisteredUser PASSED      [  5%]
httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword PASSED [  6%]
httpTests/authTests/test_auth_logout.py::testSuccessfulLogout PASSED     [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com] PASSED [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] PASSED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com] PASSED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[12345] PASSED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[] PASSED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[] PASSED  [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testDuplicateEmail PASSED     [  9%]
httpTests/authTests/test_auth_register.py::testRemovedUserName FAILED    [  9%]
httpTests/authTests/test_auth_register.py::testSuccessfulRegistration FAILED [  9%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] FAILED [ 11%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] FAILED [ 11%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember FAILED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner FAILED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember PASSED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner PASSED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate PASSED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic PASSED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testInvalidToken PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testMemberSuccessful PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testInvalidChannelId PASSED [ 16%]
httpTests/channelTests/test_channel_details.py::testInvalidToken PASSED  [ 16%]
httpTests/channelTests/test_channel_invite.py::testDuplicateInvite PASSED [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner PASSED [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testUIdInvalid PASSED     [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvalidatedToken FAILED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate FAILED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testInvalidatedToken PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully FAILED [ 20%]
httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidChannelId PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidToken PASSED    [ 21%]
httpTests/channelTests/test_channel_messages.py::testMessageTimestamp FAILED [ 21%]
httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent FAILED [ 21%]
httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent FAILED [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected FAILED [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenStartGreaterThanMessageNum PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenUserIsNonMember PASSED [ 23%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenChannelIdInvalid PASSED [ 23%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenInvalidTokenGiven FAILED [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner FAILED [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner FAILED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner FAILED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner PASSED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner FAILED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner FAILED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidUId PASSED [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId PASSED [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken PASSED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room] PASSED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-] PASSED [ 28%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
httpTests/channels_tests/test_channels_create.py::testInvalidatedToken PASSED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels PASSED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy] PASSED [ 30%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy] PASSED [ 30%]
httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel FAILED [ 30%]
httpTests/channels_tests/test_channels_list.py::testInvalidatedToken FAILED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist PASSED [ 32%]
httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken FAILED [ 32%]
httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation FAILED     [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple FAILED   [ 32%]
httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers PASSED         [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid PASSED   [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate PASSED    [ 33%]
httpTests/dmTests/test_dm_create.py::testInvalidToken PASSED             [ 34%]
httpTests/dmTests/test_dm_details.py::testMemberSuccessful FAILED        [ 34%]
httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful PASSED  [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidDmId PASSED             [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidToken PASSED            [ 35%]
httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully FAILED [ 35%]
httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember PASSED      [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidDmId PASSED               [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidToken PASSED              [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInNoDms FAILED                [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInOneDm FAILED                [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms FAILED          [ 37%]
httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm FAILED           [ 37%]
httpTests/dmTests/test_dm_list.py::testInvalidatedToken PASSED           [ 37%]
httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent FAILED [ 37%]
httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent FAILED  [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected FAILED [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected FAILED [ 38%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenStartGreaterThanMessageNum PASSED [ 38%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenUserIsNonMember PASSED [ 39%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenDmIdInvalid PASSED [ 39%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenInvalidTokenGiven PASSED [ 39%]
httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval FAILED      [ 40%]
httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm PASSED   [ 40%]
httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm PASSED [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidDmId PASSED              [ 41%]
httpTests/dmTests/test_dm_remove.py::testInvalidToken PASSED             [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel FAILED [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm FAILED [ 41%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm PASSED [ 42%]
httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage FAILED [ 42%]
httpTests/messageTests/test_message_edit.py::testInvalidMessageLength PASSED [ 42%]
httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage FAILED [ 43%]
httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit PASSED [ 43%]
httpTests/messageTests/test_message_edit.py::testInvalidToken PASSED     [ 43%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUnique PASSED [ 43%]
httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage PASSED [ 49%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm PASSED [ 49%]
httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage PASSED [ 49%]
httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage FAILED [ 49%]
httpTests/messageTests/test_message_remove.py::testInvalidToken FAILED   [ 50%]
httpTests/messageTests/test_message_send.py::testValidMessage PASSED     [ 50%]
httpTests/messageTests/test_message_send.py::testNonmemberPost PASSED    [ 50%]
httpTests/messageTests/test_message_send.py::testInvalidChannel PASSED   [ 50%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[] PASSED [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidToken FAILED     [ 51%]
httpTests/messageTests/test_message_senddm.py::testValidMessage FAILED   [ 52%]
httpTests/messageTests/test_message_senddm.py::testNonmemberPost PASSED  [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidDm PASSED      [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] PASSED [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidToken PASSED   [ 53%]
httpTests/otherTests/test_clear.py::testClearWorks FAILED                [ 66%]
httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll FAILED    [ 74%]
httpTests/otherTests/test_users_all.py::testInvalidToken PASSED          [ 75%]
httpTests/userTests/test_user_profile.py::testUserProfileValid FAILED    [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidUser PASSED         [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidToken PASSED        [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange FAILED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail PASSED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[] PASSED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidToken PASSED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle PASSED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle] PASSED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle] PASSED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken PASSED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName FAILED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 97%]
httpTests/userTests/test_user_profile_setname.py::testInvalidToken PASSED [ 97%]

====== Marks recorded: 68.77 ======


=================================== FAILURES ===================================
_____________________________ testRemovedUserName ______________________________

ctx = None

    def testRemovedUserName(ctx):
        session = authRegister('abc@gmail.com', 'password1', 'Removed', 'user', ctx)
>       profile = userProfile(session['token'], session['authUserId'], ctx)['user']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:55: KeyError
__________________________ testSuccessfulRegistration __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=297512774012, token='mu6fum71ialtr1e8mm7hi', handleStr='')
ctx = None

    def testSuccessfulRegistration(userWoody, ctx):
>       woodyProf = userProfile(userWoody.token, userWoody.uId, ctx)['user']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:62: KeyError
____________ testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] _____________

nameFirst = 'Bob', nameLast = 'Smith', expectedHandle = 'bobsmith', ctx = None

    @pytest.mark.parametrize('nameFirst, nameLast, expectedHandle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def testBasicHandleGeneratedCorrectly(nameFirst, nameLast, expectedHandle, ctx):
        session = authRegister('bob.jane@gmail.com', '~~qazwsx', nameFirst, nameLast, ctx)
    
>       actualHandle = userProfile(session['token'], session['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:78: KeyError
_ testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] _

nameFirst = 'ababababab', nameLast = 'cdcdcdcdcdcd'
expectedHandle = 'abababababcdcdcdcdcd', ctx = None

    @pytest.mark.parametrize('nameFirst, nameLast, expectedHandle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def testBasicHandleGeneratedCorrectly(nameFirst, nameLast, expectedHandle, ctx):
        session = authRegister('bob.jane@gmail.com', '~~qazwsx', nameFirst, nameLast, ctx)
    
>       actualHandle = userProfile(session['token'], session['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:78: KeyError
_ testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] _

first1 = 'abcdefghij', last1 = 'klmnopqrs', handle1 = 'abcdefghijklmnopqrs'
first2 = 'abcdefghij', last2 = 'klmnopqrs', handle2 = 'abcdefghijklmnopqrs0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1159924269964, ownerMembers=[624229705843], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=624229705843, token='al60c9rctpo2ya37aql7or', handleStr='')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:96: KeyError
_ testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] _

first1 = 'abcdefghij', last1 = 'klmnopqrst', handle1 = 'abcdefghijklmnopqrst'
first2 = 'abcdefghij', last2 = 'klmnopqrst', handle2 = 'abcdefghijklmnopqrst0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=488847027896, ownerMembers=[549951492533], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=549951492533, token='gnyxa82h28d3s2oy5cowiq', handleStr='')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:96: KeyError
_ testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] _

first1 = '@bcdefgh!j', last1 = 'klmn opqrst', handle1 = 'bcdefghjklmnopqrst'
first2 = 'bcdefghj', last2 = 'klmnopqrst', handle2 = 'bcdefghjklmnopqrst0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=234825366204, ownerMembers=[770710594927], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=770710594927, token='innm4tq2cgpwqk9nx42zi', handleStr='')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:96: KeyError
___ testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] ___

first1 = 'abc', last1 = 'def0', handle1 = 'abcdef0', first2 = 'abc'
last2 = 'def', handle2 = 'abcdef1'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=29277308394, ownerMembers=[56152278269], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=56152278269, token='bw6prvi0hcud52n3t4zbfu', handleStr='')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:96: KeyError
____________________ testChannelOwnerCanAddownerWhenMember _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=60067610245, token='5bnk2v367xmlp1jm5mtaa9', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=989196866116, ownerMembers=[60067610245], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=985543123677, token='glcnggnojqanp6arigtft', handleStr='')
ctx = None

    def testChannelOwnerCanAddownerWhenMember(userWoody, woodysPublicToybox, userBuzz, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
>       channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
_______________________ testGlobalOwnerMemberCanAddowner _______________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=138262121472, token='1ufv98dy9r3w92yl1opzai', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1537708062562, ownerMembers=[1009015805226], allMembers=[])
ctx = None

    def testGlobalOwnerMemberCanAddowner(userBuzz, woodysPublicToybox, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
>       channelAddowner(userBuzz.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=938894716735, token='wdjhp3o2alwzhoif31mso', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1326002720039, ownerMembers=[938894716735], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1640852281528, token='rl0mwwqdycy4f8dosh56r', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, woodysPublicToybox, userBuzz, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channelTests/test_channel_invite.py:58: Failed
______________________ testGlobalOwnerJoinChannelPrivate _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1045899694969, token='7t5d4l2e2v8g5xyf5pqt3t', handleStr='')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1206312106881, ownerMembers=[264484379234], allMembers=[])
ctx = None

    def testGlobalOwnerJoinChannelPrivate(userWoody, zergsPrivateLair, ctx):
>       channelJoin(userWoody.token, zergsPrivateLair.channelId, ctx)

httpTests/channelTests/test_channel_join.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
______________________ testMemberLeaveChannelSuccessfully ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=172769051677, token='d8hopotkjkfujane7zaur', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=828863048082, ownerMembers=[172769051677], allMembers=[])
ctx = None

    def testMemberLeaveChannelSuccessfully(userWoody, woodysPublicToybox, ctx):
        channelLeave(userWoody.token, woodysPublicToybox.channelId, ctx)
        chs = channelsList(userWoody.token, ctx)
    
>       assert chs['channels'] == []
E       AssertionError: assert [{'channelId': 828863048082, 'name': 'woodys toybox'}] == []
E         Left contains one more item: {'channelId': 828863048082, 'name': 'woodys toybox'}
E         Full diff:
E         - []
E         + [{'channelId': 828863048082, 'name': 'woodys toybox'}]

httpTests/channelTests/test_channel_leave.py:19: AssertionError
_____________________________ testMessageTimestamp _____________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1404295958418, ownerMembers=[1350808535275], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1350808535275, token='hd81lfcadeje7w9tboverm', handleStr='')
ctx = None

    def testMessageTimestamp(woodysPublicToybox, userWoody, ctx):
        expectedTime = utcNow()
        messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
>       assert abs(chMsgs['messages'][0]['timeSent'] - expectedTime) <= 2
E       KeyError: 'timeSent'

httpTests/channelTests/test_channel_messages.py:19: KeyError
__________________________ testUnderFiftyMessagesSent __________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=487145929329, ownerMembers=[384820412102], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=384820412102, token='mtyiz4cqx3ju1igqket3m', handleStr='')
ctx = None

    def testUnderFiftyMessagesSent(woodysPublicToybox, userWoody, ctx):
        messageIds = [
            messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)['messageId'] for x in
            range(10)
        ]
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
    
        assert chMsgs['start'] == 0
        assert chMsgs['end'] == -1
>       assert messageIds[::-1] == [m['messageId'] for m in chMsgs['messages']]
E       assert [737274101394,\n 153405739491,\n 1352486452608,\n 803723808380,\n 1572407292291,\n 777145220515,\n 1220780974815,\n 1038664531508,\n 1101059847645,\n 1148229571330] == [1148229571330,\n 1101059847645,\n 1038664531508,\n 1220780974815,\n 777145220515,\n 1572407292291,\n 803723808380,\n 1352486452608,\n 153405739491,\n 737274101394]
E         At index 0 diff: 737274101394 != 1148229571330
E         Full diff:
E           [
E         +  737274101394,
E         +  153405739491,
E         +  1352486452608,
E         +  803723808380,
E         +  1572407292291,
E         +  777145220515,
E         +  1220780974815,
E         +  1038664531508,
E         +  1101059847645,
E            1148229571330,
E         -  1101059847645,
E         -  1038664531508,
E         -  1220780974815,
E         -  777145220515,
E         -  1572407292291,
E         -  803723808380,
E         -  1352486452608,
E         -  153405739491,
E         -  737274101394,
E           ]

httpTests/channelTests/test_channel_messages.py:32: AssertionError
__________________________ testOverFiftyMessagesSent ___________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=118200268614, ownerMembers=[1494066482447], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1494066482447, token='4t1mab59f6od91un1zhi8i', handleStr='')
ctx = None

    def testOverFiftyMessagesSent(woodysPublicToybox, userWoody, ctx):
        messageIds = [
            messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)['messageId'] for x in
            range(51)
        ]
        messageIds.reverse()
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
        assert chMsgs['start'] == 0
        assert chMsgs['end'] == 50
>       assert messageIds[0: 50] == [m['messageId'] for m in chMsgs['messages']]
E       assert [1431372716431,\n 26010472354,\n 44417660648,\n 159631899129,\n 652435988152,\n 1292167512316,\n 1194810827145,\n 75503429439,\n 115143352657,\n 1224415161618,\n 348912345545,\n 1404088745955,\n 345821780880,\n 1186901596234,\n 424133480626,\n 157524434008,\n 697359915736,\n 1148375515288,\n 1244808075650,\n 1518459076895,\n 1027900240532,\n 1173317692544,\n 1098793476459,\n 973283288928,\n 686994685952,\n 843354074275,\n 124951038919,\n 1014731359818,\n 497713568974,\n 272611524321,\n 202040359584,\n 857555117277,\n 1599780424265,\n 1012270900320,\n 1183571816220,\n 1395913003842,\n 1473392548906,\n 9541666871,\n 1057589219218,\n 978530870515,\n 419329674575,\n 962414833313,\n 155035316346,\n 1231316435220,\n 703264028278,\n 1555556819471,\n 356421074118,\n 1628407518045,\n 1341939541926,\n 1213590543489] == [761805294466,\n 1213590543489,\n 1341939541926,\n 1628407518045,\n 356421074118,\n 1555556819471,\n 703264028278,\n 1231316435220,\n 155035316346,\n 962414833313,\n 419329674575,\n 978530870515,\n 1057589219218,\n 9541666871,\n 1473392548906,\n 1395913003842,\n 1183571816220,\n 1012270900320,\n 1599780424265,\n 857555117277,\n 202040359584,\n 272611524321,\n 497713568974,\n 1014731359818,\n 124951038919,\n 843354074275,\n 686994685952,\n 973283288928,\n 1098793476459,\n 1173317692544,\n 1027900240532,\n 1518459076895,\n 1244808075650,\n 1148375515288,\n 697359915736,\n 157524434008,\n 424133480626,\n 1186901596234,\n 345821780880,\n 1404088745955,\n 348912345545,\n 1224415161618,\n 115143352657,\n 75503429439,\n 1194810827145,\n 1292167512316,\n 652435988152,\n 159631899129,\n 44417660648,\n 26010472354]
E         At index 0 diff: 1431372716431 != 761805294466
E         Full diff:
E           [
E         -  761805294466,
E         +  1431372716431,
E         +  26010472354,
E         +  44417660648,
E         +  159631899129,
E         +  652435988152,
E         +  1292167512316,
E         +  1194810827145,
E         +  75503429439,
E         +  115143352657,
E         +  1224415161618,
E         +  348912345545,
E         +  1404088745955,
E         +  345821780880,
E         +  1186901596234,
E         +  424133480626,
E         +  157524434008,
E         +  697359915736,
E         +  1148375515288,
E         +  1244808075650,
E         +  1518459076895,
E         +  1027900240532,
E         +  1173317692544,
E         +  1098793476459,
E         +  973283288928,
E         +  686994685952,
E         +  843354074275,
E         +  124951038919,
E         +  1014731359818,
E         +  497713568974,
E         +  272611524321,
E         +  202040359584,
E         +  857555117277,
E         +  1599780424265,
E         +  1012270900320,
E         +  1183571816220,
E         +  1395913003842,
E         +  1473392548906,
E         +  9541666871,
E         +  1057589219218,
E         +  978530870515,
E         +  419329674575,
E         +  962414833313,
E         +  155035316346,
E         +  1231316435220,
E         +  703264028278,
E         +  1555556819471,
E         +  356421074118,
E         +  1628407518045,
E         +  1341939541926,
E            1213590543489,
E         -  1341939541926,
E         -  1628407518045,
E         -  356421074118,
E         -  1555556819471,
E         -  703264028278,
E         -  1231316435220,
E         -  155035316346,
E         -  962414833313,
E         -  419329674575,
E         -  978530870515,
E         -  1057589219218,
E         -  9541666871,
E         -  1473392548906,
E         -  1395913003842,
E         -  1183571816220,
E         -  1012270900320,
E         -  1599780424265,
E         -  857555117277,
E         -  202040359584,
E         -  272611524321,
E         -  497713568974,
E         -  1014731359818,
E         -  124951038919,
E         -  843354074275,
E         -  686994685952,
E         -  973283288928,
E         -  1098793476459,
E         -  1173317692544,
E         -  1027900240532,
E         -  1518459076895,
E         -  1244808075650,
E         -  1148375515288,
E         -  697359915736,
E         -  157524434008,
E         -  424133480626,
E         -  1186901596234,
E         -  345821780880,
E         -  1404088745955,
E         -  348912345545,
E         -  1224415161618,
E         -  115143352657,
E         -  75503429439,
E         -  1194810827145,
E         -  1292167512316,
E         -  652435988152,
E         -  159631899129,
E         -  44417660648,
E         -  26010472354,
E           ]

httpTests/channelTests/test_channel_messages.py:45: AssertionError
__________________________ testRemovalByEditReflected __________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=805952538084, ownerMembers=[1343582764674], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1343582764674, token='xmui4locb7qx977jh98ym', handleStr='')
ctx = None

    def testRemovalByEditReflected(woodysPublicToybox, userWoody, ctx):
        msg = messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy maybe?', ctx)['messageId']
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
        assert chMsgs['start'] == 0
        assert chMsgs['end'] == -1
        assert msg in [m['messageId'] for m in chMsgs['messages']]
    
>       messageEdit(userWoody.token, msg, '', ctx)

httpTests/channelTests/test_channel_messages.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:33: in messageEdit
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
_____________________ testAccessErrorWhenInvalidTokenGiven _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1413642427699, token='vrwh6shurjowlt0cvcrevq', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1335154600854, ownerMembers=[1413642427699], allMembers=[])
ctx = None

    def testAccessErrorWhenInvalidTokenGiven(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channelTests/test_channel_messages.py:101: Failed
___________________________ testOwnerCanRemoveOwner ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=569510665332, token='dqtywkn9fusohx1fyjn2tr', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=892065682438, ownerMembers=[569510665332], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=386767217863, token='f0khxnqb2fr7h438z8i5da', handleStr='')
ctx = None

    def testOwnerCanRemoveOwner(userWoody, woodysPublicToybox, userBuzz, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
>       channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
______________________ testGlobalOwnerMmberCanRemoveOwner ______________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1177822255250, token='k39d7ygk2dgn997m7ev7g', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1302331861116, token='s80t1j4ux0fu0i4khbt4xk', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1461760199443, ownerMembers=[1302331861116], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1223338247024, token='h3dabxbdnz91gbb13zuca0h', handleStr='')
ctx = None

    def testGlobalOwnerMmberCanRemoveOwner(userZerg, userWoody, woodysPublicToybox, userBuzz, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userZerg.uId, ctx)
    
>       channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
__________________ testGlobalOwnerNonmemberCannotRemoveOwner ___________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1567571413070, token='nnghv33okz8avh2naz3esd', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1349735029526, token='14cw433wrhmnoge66wykrs8', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=378524000664, ownerMembers=[1349735029526], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=331468505262, token='cr0tfk1f3ts8730sqa11p7', handleStr='')
ctx = None

    def testGlobalOwnerNonmemberCannotRemoveOwner(userZerg, userWoody, woodysPublicToybox, userBuzz, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
>       channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
__________________________ testMmberCannotRemoveOwner __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1043826618453, token='wiy8c10tq8byov61sa5xq', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1638006111427, ownerMembers=[1043826618453], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=408999219867, token='nmhbnfgotqqechnyuv3yi5', handleStr='')
ctx = None

    def testMmberCannotRemoveOwner(userWoody, woodysPublicToybox, userBuzz, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
        with pytest.raises(AccessError):
>           channelRemoveowner(userBuzz.token, woodysPublicToybox.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:78: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:84: Exception
_____________________ testGlobalOwnerCannotRemoveOnlyOwner _____________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1472546874029, token='u2u1man1pdde918s6fluw', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1371571290888, token='niaegi3zuw1opkuaokps9', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1482596803788, ownerMembers=[1371571290888], allMembers=[])
ctx = None

    def testGlobalOwnerCannotRemoveOnlyOwner(userBuzz, userWoody, woodysPublicToybox, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
        with pytest.raises(InputError):
>           channelRemoveowner(userBuzz.token, woodysPublicToybox.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:78: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:84: Exception
__________________________ testListAfterLeaveChannel ___________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=420244320155, ownerMembers=[1447824114995], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1447824114995, token='kr0yswckpwc4e23rwni29', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=355638795986, token='032zlkj53d3dao0ef1wkfue', handleStr='')
ctx = None

    def testListAfterLeaveChannel(woodysPublicToybox, userWoody, userBuzz, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
        channelLeave(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
>       assert channelsList(userBuzz.token, ctx)['channels'] == []
E       AssertionError: assert [{'channelId': 420244320155, 'name': 'woodys toybox'}] == []
E         Left contains one more item: {'channelId': 420244320155, 'name': 'woodys toybox'}
E         Full diff:
E         - []
E         + [{'channelId': 420244320155, 'name': 'woodys toybox'}]

httpTests/channels_tests/test_channels_list.py:47: AssertionError
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1348954220687, token='3csoa4ktyfz1bn807l5ef2', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelsList(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channels_tests/test_channels_list.py:53: Failed
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=917892557148, token='76k57wx4mwgpzbw143hpr', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelsListall(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channels_tests/test_channels_listall.py:44: Failed
___________________________ testSuccessfulDmCreation ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=216042196269, token='ph1tutolvcdkztiejrczoc', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1314462836202, token='dyqck17w0z0yfroc8mp9v', handleStr='')
ctx = None

    def testSuccessfulDmCreation(userWoody, userBuzz, ctx):
        aDm = dmCreate(userWoody.token, [userBuzz.uId], ctx)
    
        woodysDms = dmList(userWoody.token, ctx)
        buzzsDms = dmList(userBuzz.token, ctx)
    
>       assert woodysDms['dms'][0]['dmId'] == aDm['dmId']
E       TypeError: list indices must be integers or slices, not str

httpTests/dmTests/test_dm_create.py:20: TypeError
__________________________ testDmNameCreationMultiple __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=873094529843, token='08mziowilokmlc9bb07bbi', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=415887937405, token='18uyydq91zqwxv855nv8x', handleStr='')
ctx = None

    def testDmNameCreationMultiple(userWoody, userBuzz, ctx):
        theDm = dmCreate(userWoody.token, [userBuzz.uId], ctx)
        dmDeets = dmDetails(userWoody.token, theDm['dmId'], ctx)
    
>       assert dmDeets['name'] == ', '.join(sorted([userWoody.handleStr, userBuzz.handleStr]))
E       assert "'buzzlightyear, sheriffwoody'" == ', '
E         - , 
E         + 'buzzlightyear, sheriffwoody'

httpTests/dmTests/test_dm_create.py:36: AssertionError
_____________________________ testMemberSuccessful _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=484828101530, token='a51d51kp9wev0rhz915zci', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=213115160552, token='vte2h23bg810lqnqh6rwal', handleStr='')
woodyAndBuzzDm = DM(owner=484828101530, members=[213115160552], name="'buzzlightyear, sheriffwoody'", dmId=132318821681)
ctx = None

    def testMemberSuccessful(userWoody, userBuzz, woodyAndBuzzDm, ctx):
        dmDeets = dmDetails(userBuzz.token, woodyAndBuzzDm.dmId, ctx)
    
        assert dmDeets['name'] == woodyAndBuzzDm.name
    
        sortedMembers = sorted(dmDeets['members'], key=lambda m: m['handleStr'])
        sortedUsers = sorted([userBuzz, userWoody], key=lambda m: m.handleStr)
    
        for detail, usr in zip(sortedMembers, sortedUsers):
            assert detail['uId'] == usr.uId
            assert detail['email'] == usr.email
            assert detail['nameFirst'] == usr.nameFirst
            assert detail['nameLast'] == usr.nameLast
>           assert detail['handleStr'] == usr.handleStr
E           AssertionError: assert 'buzzlightyear' == ''
E             + buzzlightyear

httpTests/dmTests/test_dm_details.py:27: AssertionError
________________________ testMemberLeaveDmSuccessfully _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=582562441413, token='i6l1nedxhu9vnrfv8q3owc', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=871082610998, token='lrvheqyrk9f9n72z5s2xe8', handleStr='')
woodyAndBuzzDm = DM(owner=582562441413, members=[871082610998], name="'buzzlightyear, sheriffwoody'", dmId=252538925871)
ctx = None

    def testMemberLeaveDmSuccessfully(userWoody, userBuzz, woodyAndBuzzDm, ctx):
        dmLeave(userBuzz.token, woodyAndBuzzDm.dmId, ctx)
    
        buzzsDms = dmList(userBuzz.token, ctx)
        dmDeets = dmDetails(userWoody.token, woodyAndBuzzDm.dmId, ctx)
    
>       assert buzzsDms['dms'] == []
E       TypeError: list indices must be integers or slices, not str

httpTests/dmTests/test_dm_leave.py:20: TypeError
_______________________________ testWhenInNoDms ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1437447706306, token='cltuyup9r0uw9fi675i08r', handleStr='')
ctx = None

    def testWhenInNoDms(userWoody, ctx):
>       assert dmList(userWoody.token, ctx)['dms'] == []
E       TypeError: list indices must be integers or slices, not str

httpTests/dmTests/test_dm_list.py:15: TypeError
_______________________________ testWhenInOneDm ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1081949678309, token='kegny7uihea15t2ykp8phn', handleStr='')
woodyAndBuzzDm = DM(owner=1081949678309, members=[285322364289], name="'buzzlightyear, sheriffwoody'", dmId=910207855651)
ctx = None

    def testWhenInOneDm(userWoody, woodyAndBuzzDm, ctx):
        dms = dmList(userWoody.token, ctx)
    
>       assert dms == {'dms': [{'name': woodyAndBuzzDm.name, 'dmId': woodyAndBuzzDm.dmId}]}
E       assert [{'dmId': 910207855651, 'name': "'buzzlightyear, sheriffwoody'"}] == {'dms': [{'dmId': 910207855651, 'name': "'buzzlightyear, sheriffwoody'"}]}
E         +[{'dmId': 910207855651, 'name': "'buzzlightyear, sheriffwoody'"}]
E         -{'dms': [{'name': "'buzzlightyear, sheriffwoody'", 'dmId': 910207855651}]}
E         Full diff:
E         - {'dms': [{'dmId': 910207855651, 'name': "'buzzlightyear, sheriffwoody'"}]}
E         ? --------                                                                 -
E         + [{'dmId': 910207855651, 'name': "'buzzlightyear, sheriffwoody'"}]

httpTests/dmTests/test_dm_list.py:21: AssertionError
____________________________ testWhenInMultipleDms _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=29366366280, token='sx3o295gc3mwudi4x8hjiq', handleStr='')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7fe0a6be30d0>, ctx = None

    def testWhenInMultipleDms(userWoody, dmFactory, ctx):
        dm_1 = dmFactory(userWoody, [])
        dm_2 = dmFactory(userWoody, [])
    
        expected = [{'dmId': dm_1.dmId, 'name': dm_1.name}, {'dmId': dm_2.dmId, 'name': dm_2.name}]
>       actual = dmList(userWoody.token, ctx)['dms']
E       TypeError: list indices must be integers or slices, not str

httpTests/dmTests/test_dm_list.py:29: TypeError
_____________________________ testListAfterLeaveDm _____________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1282082068523, token='svpoyrmcr94qca83bufb4', handleStr='')
woodyAndBuzzDm = DM(owner=563575287807, members=[1282082068523], name="'buzzlightyear, sheriffwoody'", dmId=992666500767)
ctx = None

    def testListAfterLeaveDm(userBuzz, woodyAndBuzzDm, ctx):
        dmLeave(userBuzz.token, woodyAndBuzzDm.dmId, ctx)
    
>       assert dmList(userBuzz.token, ctx)['dms'] == []
E       TypeError: list indices must be integers or slices, not str

httpTests/dmTests/test_dm_list.py:37: TypeError
__________________________ testUnderFiftyMessagesSent __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1136129073533, token='2vghm2exydomoui89l6olk', handleStr='')
woodyAndBuzzDm = DM(owner=1136129073533, members=[542309098833], name="'buzzlightyear, sheriffwoody'", dmId=1148410223087)
ctx = None

    def testUnderFiftyMessagesSent(userWoody, woodyAndBuzzDm, ctx):
        messageIds = [
            messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy', ctx)['messageId'] for x in
            range(10)
        ]
    
        dmMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
    
        assert dmMsgs['start'] == 0
        assert dmMsgs['end'] == -1
>       assert messageIds[::-1] == [m['messageId'] for m in dmMsgs['messages']]

httpTests/dmTests/test_dm_messages.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7fe0a6b6c4c0>

>   assert messageIds[::-1] == [m['messageId'] for m in dmMsgs['messages']]
E   TypeError: string indices must be integers

httpTests/dmTests/test_dm_messages.py:25: TypeError
__________________________ testOverFiftyMessagesSent ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=309780462707, token='bnd66zktsdou8om3c7mmga', handleStr='')
woodyAndBuzzDm = DM(owner=309780462707, members=[118100133924], name="'buzzlightyear, sheriffwoody'", dmId=968674536896)
ctx = None

    def testOverFiftyMessagesSent(userWoody, woodyAndBuzzDm, ctx):
        messageIds = [
            messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy', ctx)['messageId'] for x in
            range(51)
        ]
        messageIds.reverse()
    
        dmMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
        assert dmMsgs['start'] == 0
        assert dmMsgs['end'] == 50
>       assert messageIds[0: 50] == [m['messageId'] for m in dmMsgs['messages']]

httpTests/dmTests/test_dm_messages.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7fe0a6bbedc0>

>   assert messageIds[0: 50] == [m['messageId'] for m in dmMsgs['messages']]
E   TypeError: string indices must be integers

httpTests/dmTests/test_dm_messages.py:38: TypeError
__________________________ testRemovalByEditReflected __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=289814054552, token='h7atorn39ijpgqs7inm5s', handleStr='')
woodyAndBuzzDm = DM(owner=289814054552, members=[658054309287], name="'buzzlightyear, sheriffwoody'", dmId=254517624425)
ctx = None

    def testRemovalByEditReflected(userWoody, woodyAndBuzzDm, ctx):
        msg = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy maybe?', ctx)['messageId']
    
        dmMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
        assert dmMsgs['start'] == 0
        assert dmMsgs['end'] == -1
>       assert msg in [m['messageId'] for m in dmMsgs['messages']]

httpTests/dmTests/test_dm_messages.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7fe0a6b59880>

>   assert msg in [m['messageId'] for m in dmMsgs['messages']]
E   TypeError: string indices must be integers

httpTests/dmTests/test_dm_messages.py:52: TypeError
________________________ testRemovalByDeletionReflected ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=141710166901, token='de1d83wqu56u2sofzb0svq', handleStr='')
woodyAndBuzzDm = DM(owner=141710166901, members=[170272586655], name="'buzzlightyear, sheriffwoody'", dmId=1564116762284)
ctx = None

    def testRemovalByDeletionReflected(userWoody, woodyAndBuzzDm, ctx):
        msg = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy maybe?', ctx)['messageId']
    
        chMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
        assert chMsgs['start'] == 0
        assert chMsgs['end'] == -1
>       assert msg in [m['messageId'] for m in chMsgs['messages']]

httpTests/dmTests/test_dm_messages.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7fe0a6b91a90>

>   assert msg in [m['messageId'] for m in chMsgs['messages']]
E   TypeError: string indices must be integers

httpTests/dmTests/test_dm_messages.py:67: TypeError
___________________________ testSuccessfulDmRemoval ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=356247169761, token='fxddc2d97tq8533b7ygpos', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1414606579227, token='xp664x0xxvosfm77dtig', handleStr='')
woodyAndBuzzDm = DM(owner=356247169761, members=[1414606579227], name="'buzzlightyear, sheriffwoody'", dmId=183073291278)
ctx = None

    def testSuccessfulDmRemoval(userWoody, userBuzz, woodyAndBuzzDm, ctx):
        assert dmRemove(userWoody.token, woodyAndBuzzDm.dmId, ctx) == {}
    
>       assert dmList(userWoody.token, ctx)['dms'] == []
E       TypeError: list indices must be integers or slices, not str

httpTests/dmTests/test_dm_remove.py:17: TypeError
___________________ testOriginalPosterCanEditMessageChannel ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=589087381113, token='gtuu9owndqdvnt38zfs24f', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1356078212011, ownerMembers=[589087381113], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fe0a6b214c0>
ctx = None

    def testOriginalPosterCanEditMessageChannel(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
>       messageEdit(userWoody.token, aMsg.messageId, 'hi', ctx)

httpTests/messageTests/test_message_edit.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:33: in messageEdit
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
______________________ testOriginalPosterCanEditMessageDm ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=173853753753, token='26vur0uk8oupee3bgm1u8g', handleStr='')
woodyAndBuzzDm = DM(owner=173853753753, members=[221252905297], name="'buzzlightyear, sheriffwoody'", dmId=1459169503307)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fe0a6c30d30>
ctx = None

    def testOriginalPosterCanEditMessageDm(userWoody, woodyAndBuzzDm, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodyAndBuzzDm)
    
>       messageEdit(userWoody.token, aMsg.messageId, 'hi', ctx)

httpTests/messageTests/test_message_edit.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:33: in messageEdit
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
_________________________ testEmptyEditDeletesMessage __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1565036227023, token='d76tffmc2bbh77m33vpuer', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=699559923342, ownerMembers=[1565036227023], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fe0a6b613a0>
ctx = None

    def testEmptyEditDeletesMessage(userWoody, woodysPublicToybox, messageFactory, ctx):
        woodysMsg = messageFactory(userWoody, woodysPublicToybox)
>       messageEdit(userWoody.token, woodysMsg.messageId, '', ctx)

httpTests/messageTests/test_message_edit.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:33: in messageEdit
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
_________________________ testCannotEditDeletedMessage _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1510782173009, token='qpdqkvcmyy8s18ftw50v', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=351051611066, ownerMembers=[1510782173009], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fe0a6b20700>
ctx = None

    def testCannotEditDeletedMessage(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox, 'hi')
    
        # should succeed
>       messageEdit(userWoody.token, aMsg.messageId, '', ctx)

httpTests/messageTests/test_message_edit.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:33: in messageEdit
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
____________________ testNonownerNonposterCantRemoveMessage ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=694877322293, token='u7vpo77sk78vi7ls5edwof', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1311495360343, ownerMembers=[694877322293], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1460273495840, token='ifzg3hud3z862pejn43k1g', handleStr='')
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fe0a6c30ee0>
ctx = None

    def testNonownerNonposterCantRemoveMessage(userWoody, woodysPublicToybox, userBuzz, messageFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
        woodysMsg = messageFactory(userWoody, woodysPublicToybox)
    
        with pytest.raises(AccessError):
>           messageRemove(userBuzz.token, woodysMsg.messageId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/messageTests/test_message_remove.py:68: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1011085916174, token='gl7k05v1hj7khl6ujc92wj', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=942765777298, ownerMembers=[1011085916174], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fe0a6be3940>
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           messageRemove(userWoody.token, aMsg.messageId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/messageTests/test_message_remove.py:75: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1192841506955, token='p86jabq6ei9mprgrwmup', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=251600881506, ownerMembers=[1192841506955], allMembers=[])
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           messageSend(userWoody.token, woodysPublicToybox.channelId, 'AccessError nooooooooo', ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/messageTests/test_message_send.py:44: Failed
_______________________________ testValidMessage _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=484333072110, token='lrm5bz8xdkza80ljj1hfs', handleStr='')
woodyAndBuzzDm = DM(owner=484333072110, members=[88713817716], name="'buzzlightyear, sheriffwoody'", dmId=494224742920)
ctx = None

    def testValidMessage(userWoody, woodyAndBuzzDm, ctx):
        msgText = 'hello, world'
        msg = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, msgText, ctx)
    
        chMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
    
>       assert chMsgs['messages'][0]['messageId'] == msg['messageId']
E       TypeError: string indices must be integers

httpTests/messageTests/test_message_senddm.py:22: TypeError
________________________________ testClearWorks ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1246527090066, token='z22xo2sp411yy5y8ygs0k', handleStr='')
userFactory = <function userFactory.<locals>.makeUser at 0x7fe0a6b9d940>
ctx = None

    def testClearWorks(userWoody, userFactory, ctx):
        # an existing user can do something
        assert usersAll(userWoody.token, ctx) is not None
    
        clear(ctx)
    
        with pytest.raises(AccessError):
            #  ex-existing user now can't do the original action because they don't exist
            usersAll(userWoody.token, ctx)
    
        loner = userFactory('bob@gmail.com', 'aweakpassword', 'nameFirst', 'nameLast')
    
>       lonerProf = userProfile(loner.token, loner.uId, ctx)['user']
E       KeyError: 'user'

httpTests/otherTests/test_clear.py:27: KeyError
____________________________ testSuccessfulUsersAll ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1516794794562, token='echue34y5969urfq21hsbw', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=854871463439, token='9pn9dzfmg0faswbrrhojvc', handleStr='')
ctx = None

    def testSuccessfulUsersAll(userWoody, userBuzz, ctx):
        users = usersAll(userWoody.token, ctx)['users']
        users.sort(key=lambda u: u['handleStr'])
    
        for detail, usr in zip(users, (userBuzz, userWoody)):
            assert detail['uId'] == usr.uId
            assert detail['email'] == usr.email
            assert detail['nameFirst'] == usr.nameFirst
            assert detail['nameLast'] == usr.nameLast
>           assert detail['handleStr'] == usr.handleStr
E           AssertionError: assert 'buzzlightyear' == ''
E             + buzzlightyear

httpTests/otherTests/test_users_all.py:23: AssertionError
_____________________________ testUserProfileValid _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1175675889940, token='79kuojr573gu2wvzobay1b', handleStr='')
ctx = None

    def testUserProfileValid(userWoody, ctx):
>       deets = userProfile(userWoody.token, userWoody.uId, ctx)['user']
E       KeyError: 'user'

httpTests/userTests/test_user_profile.py:15: KeyError
__________________________ testSuccessfulEmailChange ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=614550438295, token='yu55nw54nkcy1e19b0hq1', handleStr='')
ctx = None

    def testSuccessfulEmailChange(userWoody, ctx):
        newEmail = 'toystory3@pixar.com'
>       userProfileSetemail(userWoody.token, newEmail, ctx)

httpTests/userTests/test_user_profile_setemail.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:33: in userProfileSetemail
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fe0adebf820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
__________________________ testSuccessfulHandleChange __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1626327901798, token='ugevvnug4jjihf0s9hjl7p', handleStr='')
ctx = None

    def testSuccessfulHandleChange(userWoody, ctx):
        newHandle = 'www'
>       userProfileSethandle(userWoody.token, newHandle, ctx)

httpTests/userTests/test_user_profile_sethandle.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:44: in userProfileSethandle
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fe0adebf820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
_______________________ testUserProfileSetnameValidName ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1398012438224, token='sj30v0tpqw7y908zcosz5', handleStr='')
ctx = None

    def testUserProfileSetnameValidName(userWoody, ctx):
        #  woody became japanese with family coming first
>       userProfileSetname(userWoody.token, userWoody.nameLast, userWoody.nameFirst, ctx)

httpTests/userTests/test_user_profile_setname.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:22: in userProfileSetname
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fe0adebf820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
=============================== warnings summary ===============================
../../../../../../usr/lib/python3/dist-packages/blinker/base.py:93
  /usr/lib/python3/dist-packages/blinker/base.py:93: DeprecationWarning: invalid escape sequence \*
    """Connect *receiver* to signal events sent by *sender*.

../../../../../../usr/lib/python3/dist-packages/blinker/base.py:161
  /usr/lib/python3/dist-packages/blinker/base.py:161: DeprecationWarning: invalid escape sequence \*
    """Connect the decorated function as a receiver for *sender*.

../../../../../../usr/lib/python3/dist-packages/blinker/base.py:242
  /usr/lib/python3/dist-packages/blinker/base.py:242: DeprecationWarning: invalid escape sequence \*
    """Emit this signal on behalf of *sender*, passing on \*\*kwargs.

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED httpTests/authTests/test_auth_register.py::testRemovedUserName - KeyEr...
FAILED httpTests/authTests/test_auth_register.py::testSuccessfulRegistration
FAILED httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith]
FAILED httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1]
FAILED httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember
FAILED httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner
FAILED httpTests/channelTests/test_channel_invite.py::testInvalidatedToken - ...
FAILED httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate
FAILED httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully
FAILED httpTests/channelTests/test_channel_messages.py::testMessageTimestamp
FAILED httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent
FAILED httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent
FAILED httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected
FAILED httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenInvalidTokenGiven
FAILED httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner
FAILED httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel
FAILED httpTests/channels_tests/test_channels_list.py::testInvalidatedToken
FAILED httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken
FAILED httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation - TypeEr...
FAILED httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple - asse...
FAILED httpTests/dmTests/test_dm_details.py::testMemberSuccessful - Assertion...
FAILED httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully - Ty...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInNoDms - TypeError: list i...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInOneDm - assert [{'dmId': ...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms - TypeError: ...
FAILED httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm - TypeError: l...
FAILED httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent - Ty...
FAILED httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent - Typ...
FAILED httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected - Ty...
FAILED httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected
FAILED httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval - TypeErr...
FAILED httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel
FAILED httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm
FAILED httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage
FAILED httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage
FAILED httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage
FAILED httpTests/messageTests/test_message_remove.py::testInvalidToken - Fail...
FAILED httpTests/messageTests/test_message_send.py::testInvalidToken - Failed...
FAILED httpTests/messageTests/test_message_senddm.py::testValidMessage - Type...
FAILED httpTests/otherTests/test_clear.py::testClearWorks - KeyError: 'user'
FAILED httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll - Asser...
FAILED httpTests/userTests/test_user_profile.py::testUserProfileValid - KeyEr...
FAILED httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange
FAILED httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange
FAILED httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName
=========== 53 failed, 131 passed, 183 skipped, 3 warnings in 17.00s ===========
