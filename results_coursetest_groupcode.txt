npm verb cli [
npm verb cli   '/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/bin/node',
npm verb cli   '/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/bin/npm',
npm verb cli   'run',
npm verb cli   'test',
npm verb cli   '--verbose',
npm verb cli   'tests/'
npm verb cli ]
npm info using npm@8.5.0
npm info using node@v16.14.2
npm timing npm:load:whichnode Completed in 0ms
npm timing config:load:defaults Completed in 2ms
npm timing config:load:file:/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/lib/node_modules/npm/npmrc Completed in 1ms
npm timing config:load:builtin Completed in 2ms
npm timing config:load:cli Completed in 2ms
npm timing config:load:env Completed in 1ms
npm timing config:load:file:/import/kamen/3/cs1531/project-automarking/tempstore/.npmrc Completed in 0ms
npm timing config:load:project Completed in 9ms
npm timing config:load:file:/import/kamen/3/cs1531/.npmrc Completed in 0ms
npm timing config:load:user Completed in 1ms
npm timing config:load:file:/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/etc/npmrc Completed in 0ms
npm timing config:load:global Completed in 0ms
npm timing config:load:validate Completed in 0ms
npm timing config:load:credentials Completed in 2ms
npm timing config:load:setEnvs Completed in 1ms
npm timing config:load Completed in 20ms
npm timing npm:load:configload Completed in 20ms
npm timing npm:load:setTitle Completed in 0ms
npm timing config:load:flatten Completed in 3ms
npm timing npm:load:display Completed in 7ms
npm verb logfile /import/kamen/3/cs1531/.npm/_logs/2022-06-25T01_07_38_712Z-debug-0.log
npm timing npm:load:logFile Completed in 7ms
npm timing npm:load:timers Completed in 0ms
npm timing npm:load:configScope Completed in 0ms
npm timing npm:load Completed in 34ms

> test
> jest "tests/"

PASS tests/tests/channels_tests/channelsListall.test.js
FAIL tests/tests/channel_tests/channelInvite.test.js
  ● Test inviting global owner 1

    TypeError: Cannot read properties of undefined (reading 'map')

      31 |     let channelDetail = channelDetailsV1(uIdBuzz, chIdWoody);
      32 |     // buzz should be in all members, not owners
    > 33 |     let owners = channelDetail['ownerMembers'].map(mem => mem['uId']);
         |                                                ^
      34 |     let allmems = channelDetail['allMembers'].map(mem => mem['uId']);
      35 |     expect(owners).toEqual(expect.not.arrayContaining([uIdBuzz]));
      36 |     expect(allmems).toContain(uIdBuzz);

      at Object.<anonymous> (tests/tests/channel_tests/channelInvite.test.js:33:48)

  ● Test inviting global owner 2

    TypeError: Cannot read properties of undefined (reading 'map')

      42 |     let channelDetail = channelDetailsV1(uIdWoody, chIdZerg);
      43 |     // buzz should be in all members, not owners
    > 44 |     let owners = channelDetail['ownerMembers'].map(mem => mem['uId']);
         |                                                ^
      45 |     let allmems = channelDetail['allMembers'].map(mem => mem['uId']);
      46 |     expect(owners).toEqual(expect.not.arrayContaining([uIdWoody]));
      47 |     expect(allmems).toContain(uIdWoody);

      at Object.<anonymous> (tests/tests/channel_tests/channelInvite.test.js:44:48)

PASS tests/tests/channels_tests/channelsList.test.js
PASS tests/tests/channel_tests/channelMessages.test.js
FAIL tests/tests/user_tests/userProfile.test.js
  ● Test valid user profile

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 0

      Object {
    -   "user": Object {
        "email": "blah@email.com",
        "handleStr": "johnsmith",
        "nameFirst": "john",
        "nameLast": "smith",
        "uId": 200102297676,
    -   },
      }

      16 |     let uID = authRegisterV1('blah@email.com', 'password1', 'john', 'smith');
      17 |     let res = userProfileV1(authID.authUserId, uID.authUserId);
    > 18 |     expect(res).toStrictEqual({user: {uId: uID.authUserId, email: 'blah@email.com', nameFirst: 'john', nameLast: 'smith', handleStr: 'johnsmith'}});
         |                 ^
      19 | });
      20 |
      21 | /*

      at Object.<anonymous> (tests/tests/user_tests/userProfile.test.js:18:17)

FAIL tests/tests/channel_tests/channelJoin.test.js
  ● Test global owner can join private channel

    TypeError: Cannot read properties of undefined (reading 'map')

      22 |     channelJoinV1(uIdWoody, chIdZerg);
      23 |     let chDeets = channelDetailsV1(uIdWoody, chIdZerg);
    > 24 |     let owners = chDeets['ownerMembers'].map(mem => mem['uId']);
         |                                          ^
      25 |     let allmems = chDeets['allMembers'].map(mem => mem['uId']);
      26 |     expect(owners).toEqual(expect.not.arrayContaining([uIdWoody]));
      27 |     expect(allmems).toContain(uIdWoody);

      at Object.<anonymous> (tests/tests/channel_tests/channelJoin.test.js:24:42)

  ● Test channel id invalid

    TypeError: Cannot read properties of undefined (reading 'members')

      137 |     // whether the authorised user is already a member of the channel,
      138 |     // if they are then error object is returned
    > 139 |     for(let i = 0; i < data.channel[channel_index].members.length; i++) {
          |                                                    ^
      140 |         if ( data.channel[channel_index].members[i].authUserId === authUserId) {
      141 |             return error;
      142 |         }

      at channelJoinV1 (src/channel.js:139:52)
      at Object.<anonymous> (tests/tests/channel_tests/channelJoin.test.js:50:15)

FAIL tests/tests/channel_tests/channelDetails.test.js
  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "bcdefghjklmnopqrst", "nameFirst": "@bcdefgh!j", "nameLast": "klmn opqrst", "uId": 513619484513}
    Received array: [{"email": "sheriff.woody@andysroom.com", "handleStr": "sheriffwoody", "nameFirst": "sheriff", "nameLast": "woody", "uId": 1055607081014}, {"email": "blah1@email.com", "handleStr": "@bcdefgh!jklmn opqrst", "nameFirst": "@bcdefgh!j", "nameLast": "klmn opqrst", "uId": 513619484513}, {"email": "blah2@email.com", "handleStr": "bcdefghjklmnopqrst", "nameFirst": "bcdefghj", "nameLast": "klmnopqrst", "uId": 555707839570}]

      45 |             let expected1 = {'uId': uId1, 'email': email1, 'nameFirst': first1, 'nameLast': last1, 'handleStr': handle1};
      46 |             let expected2 = {'uId': uId2, 'email': email2, 'nameFirst': first2, 'nameLast': last2, 'handleStr': handle2};
    > 47 |             expect(chDeets['allMembers']).toContainEqual(expected1);
         |                                           ^
      48 |             expect(chDeets['allMembers']).toContainEqual(expected2);
      49 |         }
      50 |     );

      at tests/tests/channel_tests/channelDetails.test.js:47:43

  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah2@email.com", "handleStr": "abcdef1", "nameFirst": "abc", "nameLast": "def", "uId": 244924806875}
    Received array: [{"email": "sheriff.woody@andysroom.com", "handleStr": "sheriffwoody", "nameFirst": "sheriff", "nameLast": "woody", "uId": 691517745574}, {"email": "blah1@email.com", "handleStr": "abcdef0", "nameFirst": "abc", "nameLast": "def0", "uId": 1568360452488}, {"email": "blah2@email.com", "handleStr": "abcdef01", "nameFirst": "abc", "nameLast": "def", "uId": 244924806875}]

      46 |             let expected2 = {'uId': uId2, 'email': email2, 'nameFirst': first2, 'nameLast': last2, 'handleStr': handle2};
      47 |             expect(chDeets['allMembers']).toContainEqual(expected1);
    > 48 |             expect(chDeets['allMembers']).toContainEqual(expected2);
         |                                           ^
      49 |         }
      50 |     );
      51 | });

      at tests/tests/channel_tests/channelDetails.test.js:48:43

PASS tests/tests/channels_tests/channelsCreate.test.js
PASS tests/tests/other_tests/clear.test.js
PASS tests/tests/auth_tests/authLogin.test.js
FAIL tests/tests/auth_tests/authRegister.test.js
  ● Test register with invalid email

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "error": "error",
    +   "authUserId": 865802515909,
      }

      26 |     clearV1();
      27 |     result = authRegisterV1('@gmail.com', PASSWORD, FIRST, LAST);
    > 28 |     expect(result).toStrictEqual({error: 'error'});
         |                    ^
      29 |     clearV1();
      30 |     result = authRegisterV1('bob', PASSWORD, FIRST, LAST);
      31 |     expect(result).toStrictEqual({error: 'error'});

      at Object.<anonymous> (tests/tests/auth_tests/authRegister.test.js:28:20)

Test Suites: 5 failed, 6 passed, 11 total
Tests:       8 failed, 44 passed, 52 total
Snapshots:   0 total
Time:        1.895 s, estimated 2 s
Ran all test suites matching /tests\//i.
npm timing command:run Completed in 3002ms
npm verb exit 1
npm timing npm Completed in 3240ms
npm verb code 1
